{
  "ownKey": "wiki",
  "childrenPages": {"wiki": {
    "ownKey": "wiki",
    "childrenPages": {
      "concepts": {
        "ownKey": "concepts",
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "https://drop-project-edu.github.io/drop-project",
            "fileName": "concepts",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://drop-project-edu.github.io/drop-project/wiki/concepts"
          },
          "next": {
            "path": "wiki",
            "baseUrl": "https://drop-project-edu.github.io/drop-project",
            "fileName": "assignment-creation",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://drop-project-edu.github.io/drop-project/wiki/assignment-creation"
          },
          "description": "",
          "title": "Concepts",
          "content": "<h3 id=\"assignments-and-submissions\"><a href=\"#assignments-and-submissions\" id=\"assignments-and-submissions\" class=\"anchor\"><\/a>Assignments and Submissions<\/h3>\n<p>The best way to understand how Drop Project (DP) works is to start with its two main concepts: <strong>Assignments<\/strong> and <strong>Submissions<\/strong>. Assignments are created by teachers and represent a problem that the student has to solve, while Submissions are created by students, according to the assignment instructions. The students' goal is to pass all of the assignment's tests.<\/p>\n<h4 id=\"assignments\"><a href=\"#assignments\" id=\"assignments\" class=\"anchor\"><\/a>Assignments<\/h4>\n<p>The interesting thing is that assignments are just regular Maven projects (in Java or Kotlin), stored in a regular git repository - there's nothing specific to DP in them.<\/p>\n<pre><code>+ assignment\n|--- pom.xml     (includes the checkstyle and junit plugins)\n|--- checkstyle.xml     (the rules to validate the code style, e.g., variables must start with lowercase)\n|--- instructions.html     (optional, the assignment instructions)\n|--- src\n|------ main\n|--------- ...      (here goes the reference implementation, in Maven structure)\n|------ test\n|--------- ...      (JUnit tests that will validate students' submissions)\n<\/code><\/pre>\n<p>Users with the TEACHER role will be able to create an assignment by connecting DP with its repository and filling some information. You can see an example in https://github.com/palves-ulht/sampleJavaAssignment<\/p>\n<p>The good thing is that you can code and test the assignments in your IDE, without using DP. After you finished, just connect DP to your repository. If you make further changes, just refresh the assignment in DP.<\/p>\n<h4 id=\"submissions\"><a href=\"#submissions\" id=\"submissions\" class=\"anchor\"><\/a>Submissions<\/h4>\n<p>After the assignment is marked active, students will be able to submit their projects, trying to pass all the assignment junit tests. They can submit their project by dropping a zip file or by connecting DP to a git repository containing their submission (this is specified by the teacher when she creates the assignment).<\/p>\n<p>Students can submit alone or in group - they just have to include an AUTHORS.txt in their project. One of the things that students like in DP is the fact that they can submit multiple times until they pass all the tests. It's up to the teacher to determine if the number of submissions has an effect in the final grade.<\/p>\n<p>The structure is the standard structure for standalone Java/Kotlin projects:<\/p>\n<pre><code>+ submission\n|--- AUTHORS.txt     (includes the members of the group)\n|--- src\n|--------- ...      (here goes the student source files)\n<\/code><\/pre>\n"
        }]
      },
      "code-folder-structure": {
        "ownKey": "code-folder-structure",
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "https://drop-project-edu.github.io/drop-project",
            "fileName": "code-folder-structure",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://drop-project-edu.github.io/drop-project/wiki/code-folder-structure"
          },
          "next": {
            "path": "wiki",
            "baseUrl": "https://drop-project-edu.github.io/drop-project",
            "fileName": "test-tips",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://drop-project-edu.github.io/drop-project/wiki/test-tips"
          },
          "previous": {
            "path": "wiki",
            "baseUrl": "https://drop-project-edu.github.io/drop-project",
            "fileName": "assignment-creation",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://drop-project-edu.github.io/drop-project/wiki/assignment-creation"
          },
          "description": "",
          "title": "Source code structure",
          "content": "<p>Drop Project's code itself follows the Maven folder structure.<\/p>\n<p>The following figure represents DP's folder/directory structure. Below the figure, a description of\nthe contents of each sub-folder is given.<\/p>\n<pre><code>. src\n+-- main\n+-- kotlin\n+---- org.dropProject\n+------ controllers\n+------ dao \n+------ data\n+------ extensions\n+------ filters\n+------ repositories\n+------ security\n+------ services\n+-- test\n+---- kotlin\n+---- org.dropProject\n+------ controllers\n+------ dao\n+------ data\n+------ ...\n+------ other test folders\n<\/code><\/pre>\n<h4 id=\"srcmainkotlindrop-projectcontrollers\"><a href=\"#srcmainkotlindrop-projectcontrollers\" id=\"srcmainkotlindrop-projectcontrollers\" class=\"anchor\"><\/a>src/main/kotlin/drop-project/controllers<\/h4>\n<p>Contains code related with handling HTTP requests.<\/p>\n<h4 id=\"srcmainkotlindrop-projectdao\"><a href=\"#srcmainkotlindrop-projectdao\" id=\"srcmainkotlindrop-projectdao\" class=\"anchor\"><\/a>src/main/kotlin/drop-project/dao<\/h4>\n<p>Contains the Data Access Object classes. This is where you will find the Assignment and Submission classes.<\/p>\n<h4 id=\"srcmainkotlindrop-projectdata\"><a href=\"#srcmainkotlindrop-projectdata\" id=\"srcmainkotlindrop-projectdata\" class=\"anchor\"><\/a>src/main/kotlin/drop-project/data<\/h4>\n<p>Contains auxiliary classes used in session.<\/p>\n<h4 id=\"srcmainkotlindrop-projectextensions\"><a href=\"#srcmainkotlindrop-projectextensions\" id=\"srcmainkotlindrop-projectextensions\" class=\"anchor\"><\/a>src/main/kotlin/drop-project/extensions<\/h4>\n<p>Code that extends certain classes of the Java API (e.g. Date).<\/p>\n<h4 id=\"srcmainkotlindrop-projectfilters\"><a href=\"#srcmainkotlindrop-projectfilters\" id=\"srcmainkotlindrop-projectfilters\" class=\"anchor\"><\/a>src/main/kotlin/drop-project/filters<\/h4>\n<p>Classes that intercept and pre-process HTTP requests.<\/p>\n<h4 id=\"srcmainkotlindrop-projectrepositories\"><a href=\"#srcmainkotlindrop-projectrepositories\" id=\"srcmainkotlindrop-projectrepositories\" class=\"anchor\"><\/a>src/main/kotlin/drop-project/repositories<\/h4>\n<p>Code that defines functions/interfaces to find persisted objects.<\/p>\n<h4 id=\"srcmainkotlindrop-projectsecurity\"><a href=\"#srcmainkotlindrop-projectsecurity\" id=\"srcmainkotlindrop-projectsecurity\" class=\"anchor\"><\/a>src/main/kotlin/drop-project/security<\/h4>\n<p>Contains access control definitions.<\/p>\n<h4 id=\"srcmainkotlindrop-projectservices\"><a href=\"#srcmainkotlindrop-projectservices\" id=\"srcmainkotlindrop-projectservices\" class=\"anchor\"><\/a>src/main/kotlin/drop-project/services<\/h4>\n<p>Business logic code.<\/p>\n<h4 id=\"srctestkotlindrop-projectcontrollers\"><a href=\"#srctestkotlindrop-projectcontrollers\" id=\"srctestkotlindrop-projectcontrollers\" class=\"anchor\"><\/a>src/test/kotlin/drop-project/controllers<\/h4>\n<p>Contains tests for controllers.<\/p>\n<h4 id=\"srctestkotlindrop-projectdao\"><a href=\"#srctestkotlindrop-projectdao\" id=\"srctestkotlindrop-projectdao\" class=\"anchor\"><\/a>src/test/kotlin/drop-project/dao<\/h4>\n<p>Contains tests for Data Access Object classes.<\/p>\n<h4 id=\"srctestkotlindrop-projectdata\"><a href=\"#srctestkotlindrop-projectdata\" id=\"srctestkotlindrop-projectdata\" class=\"anchor\"><\/a>src/test/kotlin/drop-project/data<\/h4>\n<p>Contains tests for the auxiliary classes .<\/p>\n<h4 id=\"srctestkotlindrop-project\"><a href=\"#srctestkotlindrop-project\" id=\"srctestkotlindrop-project\" class=\"anchor\"><\/a>src/test/kotlin/drop-project/...<\/h4>\n<p>Tests for other packages.<\/p>\n"
        }]
      },
      "test-tips": {
        "ownKey": "test-tips",
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "https://drop-project-edu.github.io/drop-project",
            "fileName": "test-tips",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://drop-project-edu.github.io/drop-project/wiki/test-tips"
          },
          "previous": {
            "path": "wiki",
            "baseUrl": "https://drop-project-edu.github.io/drop-project",
            "fileName": "code-folder-structure",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://drop-project-edu.github.io/drop-project/wiki/code-folder-structure"
          },
          "description": "",
          "title": "Test creation tips",
          "content": "<p>This page presents some ideas to consider when creating the tests for your assignments.<\/p>\n<h5 id=\"junit-101\"><a href=\"#junit-101\" id=\"junit-101\" class=\"anchor\"><\/a>JUnit 101<\/h5>\n<p>DP uses JUnit for testing. JUnit provides some multiple ready to use assertion functions, such as:<\/p>\n<ul>\n<li>assertEquals()<\/li>\n<li>assertTrue()<\/li>\n<li>assertFalse()<\/li>\n<li>assertNotNull()<\/li>\n<\/ul>\n<p>In some scenarios, the teacher might have specific comparison needs that not ensure by one of JUnit's assertions.\nIf this is the case, the teacher can use <code>fail()<\/code> to force the test to fail on a certain condition.<\/p>\n<h4 id=\"ensuring-test-execution-order\"><a href=\"#ensuring-test-execution-order\" id=\"ensuring-test-execution-order\" class=\"anchor\"><\/a>Ensuring test execution order<\/h4>\n<p>For pedagogical (or other) reasons, it might be interesting to ensure that the tests are executed in a certain order.\nThis might help the student focus on more elementary issues before delving in to more complex problems.<\/p>\n<p>In JUnit this can be achieved by:<\/p>\n<ol>\n<li>Importing the <code>org.junit.FixMethodOrder<\/code> and <code>org.junit.runners.MethodSorters<\/code> packages;<\/li>\n<li>Using the <code>@FixMethodOrder(MethodSorters.NAME_ASCENDING)<\/code> annotation before the declaration of the Test class.<\/li>\n<\/ol>\n<p>Example:<\/p>\n<pre><code>import org.junit.FixMethodOrder;    \nimport org.junit.runners.MethodSorters;\n\n@FixMethodOrder(MethodSorters.NAME_ASCENDING)\npublic class TestPerson {\n    ...\n}\n<\/code><\/pre>\n<h5 id=\"level-of-detail-in-feedback-messages\"><a href=\"#level-of-detail-in-feedback-messages\" id=\"level-of-detail-in-feedback-messages\" class=\"anchor\"><\/a>Level of detail in feedback messages<\/h5>\n<p>With the JUnit API, teachers have full control of the level of detail that is given by each assert.<\/p>\n<p>In this first example, the student will only receive a very generic message if the respective code fails the test (i.e. <code>java.lang.AssertionError<\/code>):<\/p>\n<pre><code>@Test\npublic void test001() {\n    assertTrue(Main.isOdd(10));\n}\n<\/code><\/pre>\n<p>A teacher can give further information by using the alternative version of <code>assertTrue()<\/code> that receives a String as the first argument:<\/p>\n<pre><code>@Test(timeout=1000)\npublic void test001() {\n    assertTrue(&quot;isOdd() returned false incorrectly&quot;, Main.isOdd(11));\n    assertFalse(&quot;isOdd() returned true incorrectly&quot;, Main.isOdd(20));\n}\n<\/code><\/pre>\n<h5 id=\"use-timeouts-to-prevent-infinite-loops-or-disallow-inefficient-solutions\"><a href=\"#use-timeouts-to-prevent-infinite-loops-or-disallow-inefficient-solutions\" id=\"use-timeouts-to-prevent-infinite-loops-or-disallow-inefficient-solutions\" class=\"anchor\"><\/a>Use <code>Timeouts<\/code> to prevent infinite loops or disallow inefficient solutions<\/h5>\n<p>In the following example, the test function will only be allowed 1000 milliseconds (i.e. 1 second) to run:<\/p>\n<pre><code>@Test(timeout=1000)\npublic void test001() { \n    ...\n}\n<\/code><\/pre>\n<h5 id=\"prevent-hardcoded-solutions-aka-overfitting\"><a href=\"#prevent-hardcoded-solutions-aka-overfitting\" id=\"prevent-hardcoded-solutions-aka-overfitting\" class=\"anchor\"><\/a>Prevent hardcoded solutions (aka Overfitting)<\/h5>\n<p>Some students might try to cheat the system by implementing hardcoded solutions that do not actually solve the general\nproblem presented in the assignment, but work for some inputs (namely, the ones used on the assignment). To mitigate this\nsituation, we suggest that teachers employ the following test design strategies:<\/p>\n<ul>\n<li>Multiple assertions<\/li>\n<li>Hide test case information: function arguments<\/li>\n<li>Hide test case information: function results<\/li>\n<li>Use private (or hidden) tests<\/li>\n<\/ul>\n<h6 id=\"multiple-assertions\"><a href=\"#multiple-assertions\" id=\"multiple-assertions\" class=\"anchor\"><\/a>Multiple assertions<\/h6>\n<p>Test functions should include multiple assertions, covering the range of valid return function values.<\/p>\n<p>For example, this should be avoided because a student's solution that always returns <code>true<\/code> will pass the test:<\/p>\n<pre><code>public void test001() { \n    assertTrue(Main.isOdd(11));\n}\n<\/code><\/pre>\n<p>Instead, this alternative is preferable:<\/p>\n<pre><code>public void test001() { \n    assertTrue(Main.isOdd(11));\n    assertFalse(Main.isOdd(20));\n}\n<\/code><\/pre>\n<h5 id=\"hide-test-case-information-function-arguments\"><a href=\"#hide-test-case-information-function-arguments\" id=\"hide-test-case-information-function-arguments\" class=\"anchor\"><\/a>Hide test case information: function arguments<\/h5>\n<p>Teachers should try to find a balance between exposing too much and loo little information.<\/p>\n<p>For example, the following test gives the student too much information about what is going on:<\/p>\n<pre><code>@Test\npublic void test001() { \n    assertTrue(&quot;isOdd(11) returned the wrong value&quot;, Main.isOdd(11));\n    assertTrue(&quot;isOdd(20) returned the wrong value&quot;, Main.isOdd(20));\n}\n<\/code><\/pre>\n<p>A safer alternative would be to give more generic information:<\/p>\n<pre><code>@Test\npublic void test001() {\n    assertTrue(&quot;isOdd() returned the wrong value for an odd number larger than 10&quot;, Main.isOdd(11));\n    assertTrue(&quot;isOdd() return the wrong value for an even number larger than 10&quot;, Main.isOdd(20));\n}\n<\/code><\/pre>\n<p>The teacher can also mix asserts that have a lot of information with asserts that have little information,\nas displayed in the following example:<\/p>\n<pre><code>@Test\npublic void test001() { \n    assertTrue(&quot;isOdd(11) returned the wrong value&quot;, Main.isOdd(11));\n    assertTrue(&quot;isOdd(20) return the wrong value&quot;, Main.isOdd(20));\n    \n    assertTrue(&quot;isOdd() returned the wrong value&quot;, Main.isOdd(22));\n}\n<\/code><\/pre>\n<h5 id=\"hide-test-case-information-function-results\"><a href=\"#hide-test-case-information-function-results\" id=\"hide-test-case-information-function-results\" class=\"anchor\"><\/a>Hide test case information: function results<\/h5>\n<p>Although JUnit's assertion mechanism is very helpful when defining tests, sometimes it might expose too much\ninformation. For example, the following test will let the student know the expected contents of the function's\noutput list:<\/p>\n<pre><code>@Test\npublic void test001() {\n    List&lt;Integer&gt; expectedNumbers = new ArrayList&lt;&gt;();\n    expectedNumbers.add(1);\n    expectedNumbers.add(100);\n    \n    List&lt;Integer&gt; result = Main.getNumbers();\n    \n    assertEquals(&quot;getNumbers() returned an incorrect value&quot;, expectedNumbers, result);\n}\n<\/code><\/pre>\n<p>In this case, it might be preferable to &quot;manually&quot; perform the comparison:<\/p>\n<pre><code>@Test\npublic void test001() {\n    List&lt;Integer&gt; expectedNumbers = new ArrayList&lt;&gt;();\n    expectedNumbers.add(1);\n    expectedNumbers.add(100);\n            \n    List&lt;Integer&gt; result = Main.getNumbers();\n    \n    if(result.get(0) != 1 || result.get(1) != 100) {\n        fail(&quot;getNumbers() returned an incorrect value&quot;);\n    }        \n}\n<\/code><\/pre>\n<p>Another alternative would be to perform other assertions before exposing the expected values. An example would be to test\nthe size of the returned input, before giving more detail:<\/p>\n<pre><code>@Test\npublic void test001() {\n    List&lt;Integer&gt; expectedNumbers = new ArrayList&lt;&gt;();\n    expectedNumbers.add(1);\n    expectedNumbers.add(100);\n\n    List&lt;Integer&gt; result = Main.getNumbers();\n\n    if(result.size() != 2) {\n        fail(&quot;getNumbers() returned a list with the wrong number of elements.&quot;);\n    }\n    \n    assertEquals(&quot;getNumbers() returned in incorrect value.&quot;, expectedNumbers, result);\n}\n<\/code><\/pre>\n<h6 id=\"use-private-or-hidden-tests\"><a href=\"#use-private-or-hidden-tests\" id=\"use-private-or-hidden-tests\" class=\"anchor\"><\/a>Use private (or hidden) tests<\/h6>\n<p>Finally, we recommend that any assignment used for student evaluation will contain a number of private tests.<\/p>\n<p>To define a private test in DP, just implement its function in a class prefixed by the <code>TestTeacherHidden<\/code> prefix, as in\nthe following example:<\/p>\n<pre><code>public class TestTeacherHiddenPerson {\n    @Test\n    public void test001() {\n        ...\n    }\n}\n<\/code><\/pre>\n<h5 id=\"implement-tests-that-use-inputoutput-matching\"><a href=\"#implement-tests-that-use-inputoutput-matching\" id=\"implement-tests-that-use-inputoutput-matching\" class=\"anchor\"><\/a>Implement tests that use input/output matching<\/h5>\n<p>If you prefer to create your evaluations using input/out matching instead of unit testing, you can include the\nfollowing tool in your assignment's tests:<\/p>\n<p><a href=\"https://github.com/drop-project-edu/stdin-stdout-junit-helper\">https://github.com/drop-project-edu/stdin-stdout-junit-helper<\/a><\/p>\n"
        }]
      },
      "assignment-creation": {
        "ownKey": "assignment-creation",
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "https://drop-project-edu.github.io/drop-project",
            "fileName": "assignment-creation",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://drop-project-edu.github.io/drop-project/wiki/assignment-creation"
          },
          "next": {
            "path": "wiki",
            "baseUrl": "https://drop-project-edu.github.io/drop-project",
            "fileName": "code-folder-structure",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://drop-project-edu.github.io/drop-project/wiki/code-folder-structure"
          },
          "previous": {
            "path": "wiki",
            "baseUrl": "https://drop-project-edu.github.io/drop-project",
            "fileName": "concepts",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://drop-project-edu.github.io/drop-project/wiki/concepts"
          },
          "description": "",
          "title": "Assignment Creation Tutorial",
          "content": "<p>This tutorial explains how a teacher can create a new Assignment in Drop Project.<\/p>\n<p>The first step is to create a git repository with the correct structure. The easiest way to do this is to clone one of the the following repositories:<\/p>\n<p><a href=\"https://github.com/drop-project-edu/sampleJavaAssignment\">https://github.com/drop-project-edu/sampleJavaAssignment<\/a><\/p>\n<p><a href=\"https://github.com/drop-project-edu/sampleKotlinAssignment\">https://github.com/drop-project-edu/sampleKotlinAssignment<\/a><\/p>\n<h2 id=\"structure\"><a href=\"#structure\" id=\"structure\" class=\"anchor\"><\/a>Structure<\/h2>\n<p>The structure of the repository must be the following:<\/p>\n<pre><code>+ assignment\n|--- pom.xml  (includes the checkstyle and junit plugins)\n|--- checkstyle.xml  (the rules to validate the code style, e.g., variables must start with lowercase)\n|--- instructions.html     (optional, the assignment instructions)\n|--- src\n|------ main\n|--------- ... (here goes the reference implementation, in maven structure)\n|------ test\n|--------- ... (JUnit tests that will validate students' submissions)\n<\/code><\/pre>\n<h2 id=\"assignment-creation\"><a href=\"#assignment-creation\" id=\"assignment-creation\" class=\"anchor\"><\/a>Assignment creation<\/h2>\n<p>After the creation of the repository, the following steps should be followed in the Drop Project web-application:<\/p>\n<ol>\n<li>Login with your teacher account<\/li>\n<li>From the top menu, open the <code>Manage Assignments<\/code> page<\/li>\n<li>Press the <code>Create Assignment<\/code> blue button that appears in the bottom of the page<\/li>\n<li>Fill in the form - below each field there is a short description of its purpose<\/li>\n<\/ol>\n<h2 id=\"tests\"><a href=\"#tests\" id=\"tests\" class=\"anchor\"><\/a>Tests<\/h2>\n<p>Public tests should be defined in a file whose name should be prefixed with the <code>TestTeacher<\/code>. For example, the tests\nfor a class <code>Person<\/code> should be defined in a file called <code>TestTeacherPerson<\/code>.<\/p>\n<p>Private (or Hidden) tests should be defined in a file whose name should be prefixed with <code>TestTeacherHidden<\/code>. For example, <code>TestTeacherHiddenPerson<\/code>.<\/p>\n<p>It is possible to have multiple test public and private (hidden) test classes.<\/p>\n<p>For some ideas on how to design your tests, check our <a href=\"test-tips.md\">test tips<\/a> page.<\/p>\n"
        }]
      }
    },
    "ownPages": [{
      "reference": {
        "path": "",
        "baseUrl": "https://drop-project-edu.github.io/drop-project",
        "fileName": "wiki",
        "extension": "html",
        "usePrettyUrl": true,
        "link": "https://drop-project-edu.github.io/drop-project/wiki"
      },
      "description": "",
      "title": "Wiki",
      "content": "<html>\n <head><\/head>\n <body>\n  <ul> \n   <li><a href=\"https://drop-project-edu.github.io/drop-project/wiki/concepts\">Concepts<\/a><\/li> \n   <li><a href=\"https://drop-project-edu.github.io/drop-project/wiki/assignment-creation\">Assignment Creation Tutorial<\/a><\/li> \n   <li><a href=\"https://drop-project-edu.github.io/drop-project/wiki/code-folder-structure\">Source code structure<\/a><\/li> \n   <li><a href=\"https://drop-project-edu.github.io/drop-project/wiki/test-tips\">Test creation tips<\/a><\/li> \n  <\/ul> \n <\/body>\n<\/html>\n"
    }]
  }}
}